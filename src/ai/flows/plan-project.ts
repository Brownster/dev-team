'use server';
/**
 * @fileOverview A project planning AI agent.
 *
 * - planProject - A function that handles the project planning process.
 * - PlanProjectInput - The input type for the planProject function.
 * - PlanProjectOutput - The return type for the planProject function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';
import {researchTask} from "@/ai/flows/research-task";
import { PlanProjectInputSchema, PlanProjectOutputSchema, PlanProjectInput, PlanProjectOutput } from './schemas';

// Define a more specific input schema for the prompt, including researchInfo
const PlanProjectPromptInputSchema = PlanProjectInputSchema.extend({
  researchInfo: z.string().describe('Relevant information gathered by the researcher.'),
});

const prompt = ai.definePrompt({
  name: 'planProjectPrompt',
  input: {
    schema: PlanProjectPromptInputSchema, // Use the extended schema for prompt input
  },
  output: {
    schema: PlanProjectOutputSchema, // Output schema remains the same
  },
  prompt: `You are an experienced project manager. Break down the following project idea into actionable development tasks. Assign each task to one of the following roles: Developer, Tester, Researcher, Doc Creator. Incorporate the research information to provide more context for each task.\n\nProject Idea: {{{projectIdea}}}\n\nResearch Information: {{{researchInfo}}}`,
});

export const planProject = ai.defineFlow< // Directly export the result of ai.defineFlow
  typeof PlanProjectInputSchema, // Flow input uses the original PlanProjectInputSchema
  typeof PlanProjectOutputSchema
>(
  {
    name: 'planProjectFlow',
    inputSchema: PlanProjectInputSchema,
    outputSchema: PlanProjectOutputSchema,
  },
  async input => {
    try {
      // Call the research agent to gather relevant information
      const researchResult = await researchTask({ query: `development information related to ${input.projectIdea}` });

      // Pass the project idea and research information to the prompt
      const {output} = await prompt({
        projectIdea: input.projectIdea,
        researchInfo: researchResult.info,
      });

      if (!output) {
        throw new Error('No output generated by the AI prompt for project planning.');
      }
      return output;
    } catch (error) {
      console.error('Error in planProjectFlow:', error);
      // Consider if the output schema allows for expressing errors,
      // or if a more generic error structure should be returned/thrown.
      throw new Error(`Failed to plan project: ${error instanceof Error ? error.message : String(error)}`);
    }
  }
);
